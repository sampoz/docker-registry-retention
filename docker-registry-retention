#!/usr/bin/env python2
# TODO: Convert to python3
from os.path import expanduser
from datetime import datetime
import argparse
import base64
import json
import re
import requests
import sys


def parse_arguments():
    parser = argparse.ArgumentParser(description="Script removes Docker " +
                                     "images from Docker Registry leaving " +
                                     "only latest N images")
    auth_group = parser.add_argument_group('authentication arguments')
    auth_group.add_argument("-c", "--config",
                            help="path to docker config file, " +
                            "default is ~/.docker/config.json",
                            default=expanduser("~/.docker/config.json"))
    auth_group.add_argument("-p", "--password",
                            help="override docker registry password")
    auth_group.add_argument("-u", "--username",
                            help="override docker registry username")
    auth_group.add_argument("-i", "--insecure",
                            help="skip authing to remote. Please don't use this in prod",
                            action='store_true',
                            default=False)
    parser.add_argument("repository",
                        help="docker repository, example: " +
                        "registry.example.com/mygroup/myproject")
    parser.add_argument("-d", "--dryrun",
                        help="Run without deleting anything",
                        action='store_true')
    parser.add_argument("-e", "--exclude",
                        help="exclude tags by keyword",
                        default=None)
    parser.add_argument("-k", "--keyword",
                        help="filter tags by keyword",
                        default='.')
    parser.add_argument("-r", "--retain",
                        help="retain N images, default is 10",
                        default=10,
                        type=int)

    args = parser.parse_args()
    args.registry, args.repo_path = args.repository.split('/', 1)

    if ((args.username and args.password is None and args.insecure)
            or (args.password and args.username is None)):
        error('--username and --password must be specified together')

    return args


def error(message):
    print message
    sys.exit()


def basic_auth():
    if args.username is not None:
        auth = base64.b64encode('{}:{}'.format(args.username, args.password))
    else:
        try:
            with open(args.config) as f:
                auth = json.load(f)['auths'][args.registry]['auth']
        except IOError as err:
            error(err)
        except TypeError as err:
            error(err)
        except KeyError as err:
            error("Docker auth for {} registry was not found".format(err))
    return auth


def obtain_bearer_token(basic_auth, repo_path, registry):
    auth = requests.get('https://{}/v2/'.format(registry))
    auth_str = auth.headers['Www-Authenticate'].split(" ")[1].split(",")
    auth_dict = dict([ex.strip('"') for ex in e.split("=")] for e in auth_str)

    bt_payload = {'client_id': 'docker',
                  'offline_token': 'true',
                  'service': auth_dict['service'],
                  'scope': 'repository:{}:pull,delete'.format(repo_path)}
    bt_headers = {'Authorization': 'Basic {}'.format(basic_auth)}
    try:
        bt = requests.get(url=auth_dict['realm'],
                          params=bt_payload,
                          headers=bt_headers).json()['token']
    except requests.exceptions.ConnectionError as err:
        error(err)
    except KeyError as err:
        error("{} not found in response on initial auth request".format(err))

    return bt


def get_headers(accept=False):
    hdrs = {'Content-Type': 'application/json',
            'Authorization': 'Bearer {}'.format(bt)}
    if accept:
        hdrs.update({'Accept':
                     'application/vnd.docker.distribution.manifest.v2+json'})
    return hdrs


def make_request(url, headers, insecure, params=None, method="GET"):
    try:
        response = requests.request(url=url,
                                    params=params,
                                    headers=headers,
                                    method=method,
                                    verify=not insecure)
    except requests.exceptions.ConnectionError as err:
        error(err)
    return response


def get_images_to_delete(insecure):
    exclude = re.compile(r".*{}.*".format(args.exclude))
    keyword = re.compile(r".*{}.*".format(args.keyword))
    tags_url = "https://{}/v2/{}/tags/list".format(args.registry,
                                                   args.repo_path)
    lists_raw = make_request(url=tags_url, headers=get_headers(), insecure=insecure).json()
    list = lists_raw['tags']
    filtered_list = [tag for tag in list if not re.match(exclude, tag)]
    filtered_list = [tag for tag in filtered_list if re.match(keyword, tag)]
    print("Discovered following tags: {}".format(', '.join(list)))
    print("Filtered List of tags: {}".format(', '.join(filtered_list)))

    images = []
    for tag in filtered_list:
        tag_url = "https://{}/v2/{}/manifests/{}".format(args.registry,
                                                         args.repo_path,
                                                         tag)
        image_manifest = make_request(url=tag_url, headers=get_headers(), insecure=insecure)
        try:
            raw_json = image_manifest.json()['history'][0]['v1Compatibility']
            image_date = json.loads(raw_json)['created'][:19]
            timestamp = datetime.strptime(image_date, "%Y-%m-%dT%H:%M:%S")
            images.append({'seconds': timestamp.strftime('%s'), 'tag': tag})
            print "At {} created was tag {}".format(timestamp, tag)
        except KeyError as err:
            print "Key not found '{}' for tag '{}'".format(err, tag)

    return sorted(images, key=lambda image: image['seconds'])[:-args.retain]


def delete_images(insecure):
    for image in get_images_to_delete(insecure):
        print "Deleting image with tag: {}".format(image['tag'])
        image_url = "https://{}/v2/{}/manifests/{}".format(args.registry,
                                                           args.repo_path,
                                                           image['tag'])

        image_manifest = requests.get(url=image_url,
                                      headers=get_headers(True),
                                      verify=not insecure)
        try:
            image_digest = image_manifest.headers['Docker-Content-Digest']
            image_url = "https://{}/v2/{}/manifests/{}".format(args.registry,
                                                               args.repo_path,
                                                               image_digest)
            if not args.dryrun:
                image_delete = make_request(url=image_url,
                                            headers=get_headers(),
                                            method="DELETE",
                                            insecure=insecure)
        except KeyError as err:
            print "Key not found {}".format(err)


if __name__ == '__main__':
    args = parse_arguments()
    if not args.insecure:
        bt = obtain_bearer_token(basic_auth(), args.repo_path, args.registry)
    else:
        bt = None
    delete_images(args.insecure)
